import os
import tensorflow as tf
import numpy as np

from .algorithm import Algorithm

class CNN(Algorithm):

    def __init__(self, checkpoint_dir='/tmp/'):
        self.checkpoint_dir = checkpoint_dir

        # Setup model
        self.x = tf.placeholder(tf.float32, [None, 784])
        self.y_ = tf.placeholder(tf.float32, [None, 10])

        W_conv1 = self.weight_variable([5, 5, 1, 32], 'W_conv1')
        b_conv1 = self.bias_variable([32], 'b_conv1')
        x_image = tf.reshape(self.x, [-1, 28, 28, 1])

        h_conv1 = tf.nn.relu(self.conv2d(x_image, W_conv1) + b_conv1)
        h_pool1 = self.max_pool_2x2(h_conv1)

        W_conv2 = self.weight_variable([5, 5, 32, 64], 'W_conv2')
        b_conv2 = self.bias_variable([64], 'b_conv2')

        h_conv2 = tf.nn.relu(self.conv2d(h_pool1, W_conv2) + b_conv2)
        h_pool2 = self.max_pool_2x2(h_conv2)

        W_fc1 = self.weight_variable([7 * 7 * 64, 1024], 'W_fc1')
        b_fc1 = self.bias_variable([1024], 'b_fc1')

        h_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*64])
        h_fc1 = tf.nn.relu(tf.matmul(h_pool2_flat, W_fc1) + b_fc1)

        self.keep_prob = tf.placeholder(tf.float32)
        h_fc1_drop = tf.nn.dropout(h_fc1, self.keep_prob)

        W_fc2 = self.weight_variable([1024, 10], 'W_fc2')
        b_fc2 = self.bias_variable([10], 'b_fc2')

        self.y_conv = tf.matmul(h_fc1_drop, W_fc2) + b_fc2

        cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(self.y_conv, self.y_))
        self.train_step = tf.train.AdamOptimizer(1e-4).minimize(cross_entropy)
        correct_prediction = tf.equal(tf.argmax(self.y_conv,1), tf.argmax(self.y_, 1))
        self.accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))
        self.init_op = tf.global_variables_initializer()

        # http://stackoverflow.com/questions/34727431/tensorflow-on-jupyter-cant-restore-variables
        # Explicitly pass the variable to avoid autogenerated variable names
        # (which ends in restoring bugs in jupyter)
        self.saver = tf.train.Saver(var_list={
            "W_conv1": W_conv1,
            "b_conv1": b_conv1,
            "W_conv2": W_conv2,
            "b_conv2": b_conv2,
            "W_fc1": W_fc1,
            "b_fc1": b_fc1,
            "W_fc2": W_fc2,
            "b_fc2": b_fc2,
        })
        self.sess = tf.Session()
        self.sess.run(self.init_op)

    def weight_variable(self, shape, name):
        initial = tf.truncated_normal(shape, stddev=0.1)
        return tf.Variable(initial)

    def bias_variable(self, shape, name):
        initial = tf.constant(0.1, shape=shape)
        return tf.Variable(initial)

    def conv2d(self, x, W):
        return tf.nn.conv2d(x, W, strides=[1, 1, 1, 1], padding='SAME')

    def max_pool_2x2(self, x):
        return tf.nn.max_pool(x, ksize=[1, 2, 2, 1], strides=[1, 2, 2, 1], padding='SAME')

    def one_hot_vector(self, x):
        v = [0] * 10
        v[int(x)] = 1
        return v

    def fit(self, train_data, train_labels, epochs=100, save=True):
        train_labels = [self.one_hot_vector(x) for x in train_labels]
        for i in range(epochs):
            if i % 10 == 0:
                train_accuracy = self.accuracy.eval(session=self.sess, feed_dict={
                    self.x: train_data, self.y_: train_labels, self.keep_prob: 1.0})
                print("step %d, training accuracy %g"%(i, train_accuracy))
            self.train_step.run(session=self.sess, feed_dict={self.x: train_data, self.y_: train_labels, self.keep_prob: 0.5})
        if save:
            path = '{}mnist_cnn_{}'.format(self.checkpoint_dir, epochs)
            self.saver.save(self.sess, os.path.abspath(path))
            print('Model saved at {}'.format(path))

    def restore(self, title=None):
        # with tf.Session() as sess:
        #    sess.run(self.init_op)
        if title:
            self.saver.restore(self.sess, self.checkpoint_dir + title)
            print('Model loaded')
        else:
            ckpt = tf.train.get_checkpoint_state(self.checkpoint_dir)
            if ckpt and ckpt.model_checkpoint_path:
              self.saver.restore(self.sess, ckpt.model_checkpoint_path)
              print('Model loaded')
            else:
              print('No checkpoint file found')
        return self

    def eval(self, test_data):
        predictions = self.y_conv.eval(session=self.sess, feed_dict={self.x: test_data, self.keep_prob: 1.0})
        return np.argmax(predictions, axis=1)

    def calc_accuracy(self, test_data, test_labels):
        test_labels = [self.one_hot_vector(x) for x in test_labels]
        return self.accuracy.eval(session=self.sess, feed_dict={
            self.x: test_data, self.y_: test_labels, self.keep_prob: 1.0})
